args:
- description: Integration name for which to check its instance name.
  name: integration_name
  required: true
comment: Given an integration name, returns the instance name.
commonfields:
  id: GetInstanceName
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 6.0.0
    itemVersion: 1.2.23
    packID: DeveloperTools
    packName: Developer Tools
    packPropagationLabels:
    - all
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.10.4.30607
engineinfo: {}
mainengineinfo: {}
name: GetInstanceName
outputs:
- contextPath: Instances.integrationName
  description: Requested integration name.
  type: String
- contextPath: Instances.instanceName
  description: Instance name for given integration.
  type: String
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('GetInstanceName', 'start', __line__())



  from typing import Dict, Any, Tuple


  def instance_check(instances, integration_name: str) -> Tuple[bool, Any]:
      for instance_name, details in instances.items():
          if details.get('brand') == integration_name:
              return True, instance_name
      return False, None


  def get_instance_name_command(args: Dict[str, Any]) -> CommandResults:
      integration_name = args.get('integration_name', '')

      instances = demisto.getModules()

      found, instance_name = instance_check(instances, integration_name)

      if not found:
          raise DemistoException(f'No instance for integration {integration_name}.')

      return CommandResults(
          outputs_prefix='Instances',
          outputs_key_field='',
          outputs={
              'integrationName': integration_name,
              'instanceName': instance_name
          },
      )


  def main():
      try:
          return_results(get_instance_name_command(demisto.args()))
      except Exception as ex:
          return_error(f'Failed to execute Script. Error: {str(ex)}')


  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

  register_module_line('GetInstanceName', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- basescript
type: python
