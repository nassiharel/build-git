comment: Set widgets to custom layout in Email and RiskIQAsset type of indicators.
commonfields:
  id: RiskIQPassiveTotalSSLForIssuerEmailWidgetScript
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 6.0.0
    itemVersion: 2.1.1
    packID: PassiveTotal
    packName: PassiveTotal
    packPropagationLabels:
    - all
    propagationLabels: []
    toServerVersion: ""
dependson:
  must:
  - '|||pt-ssl-cert-search'
dockerimage: demisto/python3:3.9.7.24076
enabled: true
engineinfo: {}
mainengineinfo: {}
name: RiskIQPassiveTotalSSLForIssuerEmailWidgetScript
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('RiskIQPassiveTotalSSLForIssuerEmailWidgetScript', 'start', __line__())


  import traceback
  from typing import Dict, Union, Any


  def set_arguments_for_widget_view(indicator_data: Dict[str, Any]) -> Union[Dict[str, str], str]:
      """
          Prepare argument for commands or message to set custom layout of indicator
      """
      indicator_type = indicator_data.get('indicator_type', '').lower()
      if indicator_type == 'riskiqasset':
          riskiq_asset_type = indicator_data.get('CustomFields', {}).get('riskiqassettype', '')
          if riskiq_asset_type == '':
              return 'Please provide value in the "RiskIQAsset Type" field to fetch detailed information of the asset.'
          if riskiq_asset_type == 'Contact':
              return {
                  'field': 'issuerEmailAddress',
                  'query': indicator_data.get('value', '')
              }
          else:
              return 'No SSL certificate(s) were found for the given argument(s).'
      else:
          return {
              'field': 'issuerEmailAddress',
              'query': indicator_data.get('value', '')
          }


  def main() -> None:
      try:
          arguments = set_arguments_for_widget_view(demisto.args().get('indicator'))
          if isinstance(arguments, str):
              demisto.results(arguments)
          else:
              demisto.results(demisto.executeCommand('pt-ssl-cert-search', arguments))
      except Exception as e:
          demisto.error(traceback.format_exc())  # print the traceback
          return_error(f'Could not load widget:\n{e}')


  # python2 uses __builtin__ python3 uses builtins
  if __name__ == '__builtin__' or __name__ == 'builtins':
      main()

  register_module_line('RiskIQPassiveTotalSSLForIssuerEmailWidgetScript', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- dynamic-indicator-section
timeout: 300ns
type: python
