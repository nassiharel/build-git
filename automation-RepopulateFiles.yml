comment: After running DeleteContext, this script can repopulate all the file entries
  in the ${File} context key
commonfields:
  id: RepopulateFiles
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 5.0.0
    itemVersion: 1.7.14
    packID: CommonScripts
    packName: Common Scripts
    packPropagationLabels:
    - all
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.9.7.24076
enabled: true
engineinfo: {}
mainengineinfo: {}
name: RepopulateFiles
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('RepopulateFiles', 'start', __line__())
  import os




  def parse_attachment_entries(entries):
      # list -> list
      """Parse the attachments entries.

      Args:
          entries: entries of attachments.

      Returns:
          List of entry context dict containing the attachments metadata.
      """
      entry_context = []
      for entry in entries:
          if entry.get('File') and entry.get('FileMetadata'):
              name, ext = os.path.splitext(entry['File'])
              entry_context.append({
                  'Name': entry['File'],
                  'MD5': entry['FileMetadata'].get('md5'),
                  'SHA1': entry['FileMetadata'].get('sha1'),
                  'SHA256': entry['FileMetadata'].get('sha256'),
                  'SSDeep': entry['FileMetadata'].get('ssdeep'),
                  'Size': entry['FileMetadata'].get('size'),
                  'Info': entry['FileMetadata'].get('info'),
                  'Type': entry['FileMetadata'].get('type'),
                  'Extension': ext[1:] if ext else '',
                  'EntryID': entry['ID']
              })
      return entry_context


  def main():
      """Repopulate the incident context with the attachments metadata.

      Returns:
          Demisto entry.
      """
      entries = demisto.executeCommand(
          'getEntries',
          {
              'filter': {
                  'categories': ['attachments']
              }
          }
      )
      if is_error(entries):
          return_error(get_error(entries))
      if isinstance(entries, list):
          entry_context = parse_attachment_entries(entries)
          return_outputs('Done', {outputPaths['file']: entry_context}, entry_context)
      else:
          return_outputs('No attachments were found.')


  if __name__ in ["__builtin__", "builtins"]:
      main()

  register_module_line('RepopulateFiles', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- Utility
type: python
