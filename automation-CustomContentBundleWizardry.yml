args:
- description: The EntryID of the custom content bundle from the war room.
  name: entry_id
  required: true
- auto: PREDEFINED
  defaultValue: listfiles
  description: Whether to list the files in the bundle, or return the selected files
    to the war room.
  name: action
  predefined:
  - listfiles
  - exportfiles
- description: Array of file names to export, generated from the listfiles action.
  isArray: true
  name: file_names
comment: This automation accepts an XSOAR custom content bundle, and either returns
  a list of file names, or the files you want to the war room.
commonfields:
  id: CustomContentBundleWizardry
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 6.0.0
    itemVersion: 1.0.1
    packID: XSOAR-SimpleDevToProd
    packName: XSOAR - Simple Dev to Prod
    packPropagationLabels:
    - all
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.9.7.24076
enabled: true
engineinfo: {}
mainengineinfo: {}
name: CustomContentBundleWizardry
outputs:
- contextPath: CustomContent
  description: List of files in the custom content bundle
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('CustomContentBundleWizardry', 'start', __line__())


  import tarfile
  import io

  # arguments
  action = demisto.args().get('action')
  entry_id = demisto.args().get('entry_id')
  file_names = demisto.args().get('file_names')

  # handle single file export by ensuring it's still a list
  if not isinstance(file_names, list):
      file_names = [file_names]

  # check if the content bundle exists
  res = demisto.getFilePath(entry_id)
  if not res:
      return_error(f"Entry {entry_id} not found")

  file_path = res.get('path')

  # Return a list of custom content in the content bundle
  if action == 'listfiles':
      files = []
      with open(file_path, 'rb') as f:
          data = f.read()
          tar = tarfile.open(fileobj=io.BytesIO(data))
          files = tar.getnames()

      files = [file[1:] for file in files]
      readable = f"Got {len(files)} file names from custom content bundle"
      results = CommandResults(
          readable_output=readable,
          outputs_prefix='CustomContent',
          outputs=files
      )

      return_results(results)

  # Return the selected files to the war room
  if action == "exportfiles":
      files = [f"/{file}" for file in file_names]
      exported_files = []
      with open(file_path, 'rb') as f:
          data = f.read()
          tar = tarfile.open(fileobj=io.BytesIO(data))

          for member in tar.getmembers():
              path = member.name
              if path in files:
                  data = tar.extractfile(member)  # type:ignore
                  f = data.read()  # type:ignore
                  exported_files.append(member.name[1:])
                  demisto.results(fileResult(member.name[1:], f))

      demisto.results(f"Added the following files to Context: {exported_files}")

  register_module_line('CustomContentBundleWizardry', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- Utility
type: python
