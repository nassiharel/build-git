args:
- description: |-
    The indicators query. Using `GetIndicatorsByQuery` automation.
    Example: `type:IP and lastSeen:>="2022-02-16T16:20:00 +0200" `
  name: query
  required: true
- auto: PREDEFINED
  description: The action that will be taken if the indicator will be discovered in
    the organization.
  name: action
  predefined:
  - no_action
  - allow
  - detect
  - prevent_no_ui
  - prevent
  required: true
- defaultValue: "10000"
  description: The maximum number of indicators to fetch.
  name: limit
- defaultValue: "0"
  description: The results offset page. Only change when the number of the results
    exceed the limit.
  name: offset
- description: "List of host group IDs that the indicator applies to. \nCan be retrieved
    by running the cs-falcon-list-host-groups command.\nEither applied_globally or
    host_groups must be provided."
  isArray: true
  name: host_groups
- auto: PREDEFINED
  description: The platforms that the indicator applies to.
  isArray: true
  name: platforms
  predefined:
  - mac
  - windows
  - linux
  required: true
- auto: PREDEFINED
  defaultValue: "true"
  description: "Whether the indicator is applied globally. \nEither applied_globally
    or host_groups must be provided. Default set to True."
  name: applied_globally
  predefined:
  - "true"
  - "false"
comment: Transform a XSOAR indicator into a Crowd Strike Falcon IOC. The output (found
  at the TransformIndicatorToCSFalconIOC.JsonOutput context path) is a JSON, which
  represents the indicators in CS Falcon format. This JSON can be used as the input
  for the *cs-falcon-batch-upload-custom-ioc* command.
commonfields:
  id: TransformIndicatorToCSFalconIOC
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 6.0.0
    itemVersion: 1.7.4
    packID: CrowdStrikeFalcon
    packName: CrowdStrike Falcon
    packPropagationLabels:
    - all
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.10.1.26972
engineinfo: {}
mainengineinfo: {}
name: TransformIndicatorToCSFalconIOC
outputs:
- contextPath: TransformIndicatorToCSFalconIOC
  description: Json output of the indicators. Should be the input for the *cs-falcon-batch-upload-custom-ioc*.
  type: String
- contextPath: TransformIndicatorToCSFalconIOC.Indicators.value
  description: The value of the Indicator.
  type: String
- contextPath: TransformIndicatorToCSFalconIOC.Indicators.expiration
  description: The date on which the indicator will become inactive.
  type: String
- contextPath: TransformIndicatorToCSFalconIOC.Indicators.description
  description: Descriptive label for the indicator
  type: String
- contextPath: TransformIndicatorToCSFalconIOC.Indicators.tags
  description: List of tags of the indicator
  type: Unknown
- contextPath: TransformIndicatorToCSFalconIOC.Indicators.source
  description: 'The source where this indicator originated. '
  type: String
- contextPath: TransformIndicatorToCSFalconIOC.Indicators.id
  description: The ID of the indicator
  type: String
- contextPath: TransformIndicatorToCSFalconIOC.Indicators.type
  description: 'Type of the indicator. Possible values are: md5, sha256, ipv4, ipv6
    and domain.'
  type: String
- contextPath: TransformIndicatorToCSFalconIOC.Indicators.severity
  description: 'The severity of the indicator. possible values are: Informational,
    Low, Medium, High and Critical.'
  type: String
- contextPath: TransformIndicatorToCSFalconIOC.Indicators.action
  description: The action that will be taken if the indicator will be discovered in
    the organization.
  type: String
- contextPath: TransformIndicatorToCSFalconIOC.Indicators.applied_globally
  description: Whether the indicator is applied globally.
  type: Boolean
- contextPath: TransformIndicatorToCSFalconIOC.Indicators.platforms
  description: The platforms that the indicator applies to.
  type: Unknown
- contextPath: TransformIndicatorToCSFalconIOC.Indicators.host_groups
  description: List of host group IDs that the indicator applies to.
  type: Unknown
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('TransformIndicatorToCSFalconIOC', 'start', __line__())

  import traceback

  # Feel free to change it hard-coded
  IOC_SOURCE = 'Cortex XSOAR'
  IOC_DESCRIPTION = ''

  POPULATE_INDICATOR_FIELDS = ['value', 'expiration', 'score', 'description', 'tags', 'indicator_type']

  INDICATOR_FIELDS_TO_CS_FALCON_IOC = {
      'value': 'value',
      'expiration': 'expiration',
      'score': 'severity',
      'description': 'description',
      'tags': 'tags',
      'indicator_type': 'type',
  }

  # Feel free to change it hard-coded.
  # Possible values in CS Falcon are: Informational, Low, Medium, High and Critical

  DBOT_SCORE_TO_CS_FALCON_SEVERITY = {
      Common.DBotScore.BAD: 'High',
      Common.DBotScore.SUSPICIOUS: 'Medium',
      Common.DBotScore.GOOD: 'Informational',
      Common.DBotScore.NONE: 'Informational',
  }


  def convert_unique_fields(ioc: dict, action: str, host_groups: list, platforms: list, applied_globally: bool):
      # XSOAR indicators always have score
      ioc['severity'] = DBOT_SCORE_TO_CS_FALCON_SEVERITY[
          ioc.get('severity')]    # type: ignore

      if ioc.get('type'):
          indicator_type = ioc.get('type')
          indicator_value = ioc.get('value', '')
          if indicator_type == 'File':
              hash_type = get_hash_type(indicator_value)
              if hash_type == 'md5':
                  ioc['type'] = 'md5'
              elif hash_type == 'sha256':
                  ioc['type'] = 'sha256'
          elif indicator_type == 'IP':
              ip_type = FeedIndicatorType.ip_to_indicator_type(indicator_value)
              if ip_type == 'IP':
                  ioc['type'] = 'ipv4'
              elif ip_type == 'IPv6':
                  ioc['type'] = 'ipv6'
          elif indicator_type == 'DOMAIN':
              ioc['type'] = 'domain'
          else:
              raise DemistoException(f'The indicator type: {indicator_type} does not exist in CS Falcon')
      # If you want to map the action field, you can do it here.
      # Note: The action arg is mandatory with CS Falcon api
      # Possible values are: 'no_action', 'allow', 'detect', 'prevent_no_ui', and 'prevent'.
      ioc['action'] = action
      # Note: The platforms arg is mandatory with CS Falcon api
      if not platforms:
          raise ValueError('Platform is required.')
      ioc['platforms'] = platforms

      ioc['source'] = IOC_SOURCE

      if host_groups:
          ioc['host_groups'] = host_groups
      if applied_globally:
          ioc['applied_globally'] = applied_globally
      if not ioc.get('description', '') and IOC_DESCRIPTION:
          ioc['description'] = IOC_DESCRIPTION

      return ioc


  def get_indicators_by_query():
      action = demisto.args().pop('action')
      platforms = argToList(demisto.args().pop('platforms'))
      host_groups = argToList(demisto.args().pop('host_groups')) if demisto.args().get('host_groups') else []
      applied_globally = argToBoolean(demisto.args().pop('applied_globally'))
      demisto.args().update({'populateFields': POPULATE_INDICATOR_FIELDS})
      indicators = execute_command('GetIndicatorsByQuery', args=demisto.args())
      cs_falcon_iocs = []
      if indicators:
          for indicator in indicators:
              # convert XSOAR indicator to CS Falcon IOC
              cs_falcon_ioc = {INDICATOR_FIELDS_TO_CS_FALCON_IOC[indicator_field]: indicator_value for
                               (indicator_field, indicator_value) in indicator.items()}
              cs_falcon_ioc = convert_unique_fields(cs_falcon_ioc, action, host_groups, platforms, applied_globally)
              cs_falcon_iocs.append(cs_falcon_ioc)
      return cs_falcon_iocs


  def main():
      try:
          cs_falcon_iocs = get_indicators_by_query()
          human_readable = tableToMarkdown('TransformIndicatorToCSFalconIOC is done:',
                                           cs_falcon_iocs, removeNull=True,
                                           headers=list(INDICATOR_FIELDS_TO_CS_FALCON_IOC.values()))
          context = {
              'TransformIndicatorToCSFalconIOC.JsonOutput': json.dumps(cs_falcon_iocs),
              'TransformIndicatorToCSFalconIOC.Indicators': cs_falcon_iocs,
          }
          demisto.results({
              'Type': entryTypes['note'],
              'ContentsFormat': formats['text'],
              'Contents': cs_falcon_iocs,
              'EntryContext': context,
              'HumanReadable': human_readable,
          })

      except Exception as ex:
          demisto.error(traceback.format_exc())  # print the traceback
          return_error(f'Failed to execute TransformIndicatorToCSFalconIOC. Error: {str(ex)}')


  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

  register_module_line('TransformIndicatorToCSFalconIOC', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags: []
type: python
