args:
- description: The PAN-OS version - ex 9.1.0
  name: version
  required: true
- description: The list of advisories, produced by pan-advisories-get-advisories
  isArray: true
  name: advisories
  required: true
comment: Checks if the given PAN-OS version number is affected by the given list of
  vulnerabilties from the pan-advisories-get-advisories command.
commonfields:
  id: CheckPanosVersionAffected
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 5.5.0
    itemVersion: 1.0.0
    packID: PaloAltoNetworks_SecurityAdvisories
    packName: Palo Alto Networks Security Advisories
    packPropagationLabels:
    - all
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.10.4.30607
engineinfo: {}
mainengineinfo: {}
name: CheckPanosVersionAffected
outputs:
- contextPath: MatchingSecurityAdvisory.data_type
  description: The type of advisory this is
  type: String
- contextPath: MatchingSecurityAdvisory.data_format
  description: The format of the advisory, such as MITRE
  type: String
- contextPath: MatchingSecurityAdvisory.cve_id
  description: The ID of the CVE described by this advisory
  type: String
- contextPath: MatchingSecurityAdvisory.cve_date_public
  description: The date this CVE was released
  type: String
- contextPath: MatchingSecurityAdvisory.cve_title
  description: The name of this CVE
  type: String
- contextPath: MatchingSecurityAdvisory.description
  description: Human readable description of Advisory
  type: String
- contextPath: MatchingSecurityAdvisory.affected_version_list
  description: List of PAN-OS affected versions exactly
  type: String
- contextPath: MatchingSecurityAdvisory.cvss_score
  description: CVSS Score of matched vulnerability
  type: Unknown
- contextPath: MatchingSecurityAdvisory.cvss_severity
  description: CVSS Severity of matched vulnerability
  type: Unknown
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('CheckPanosVersionAffected', 'start', __line__())




  """
  This automation compares a given PAN-OS version (ex. 9.1.1) with a list of PAN-OS advisories from the
  pan-advisories-get-advisors command to see if it is affected by any in the list.
  """

  from typing import List
  from dataclasses import dataclass


  @dataclass
  class Advisory:
      """
      :param data_type: The type of advisory this is
      :param data_format: The format of the advisory, such as MITRE
      :param cve_id: The ID of the CVE described by this advisory
      :param cve_date_public: The date this CVE was released
      :param cve_title: The name of this CVE
      :param affects_product_name: The name of the product this affects, such as PAN-OS
      :param description: Human readable description of Advisory
      :param affected_version_list: List of PAN-OS affected versions exactly
      """
      data_type: str
      data_format: str
      cve_id: str
      cve_date_public: str
      cve_title: str
      description: str
      cvss_score: int
      cvss_severity: str
      cvss_vector_string: str
      affected_version_list: list

      _title = "Matching advisories"
      _output_prefix = "MatchingSecurityAdvisory"


  def return_result_dataclass(result: List[Advisory]):
      """Converts the resultant dataclasses into command results"""
      if not result:
          command_result = CommandResults(
              readable_output="No results.",
          )
          return command_result

      if type(result) is list:
          outputs = [vars(x) for x in result]
          summary_list = [vars(x) for x in result]
          title = result[0]._title
          output_prefix = result[0]._output_prefix

      readable_output = tableToMarkdown(title, summary_list)
      command_result = CommandResults(
          outputs_prefix=output_prefix,
          outputs=outputs,
          readable_output=readable_output,
      )
      return command_result


  def simplify_affected_version_list(affected_version_list: List[str]):
      """
      The affected version list includes the platform prefixed (PAN-OS 9.1.1) - trim the PAN-OS out and return the list.
      """
      simplified_version_list: List[str] = []
      for version_string in affected_version_list:
          simplified_version_list.append(version_string.split(" ")[1])

      return simplified_version_list


  def compare_version_with_advisories(panos_version: str, advisories_list: List[Advisory]):
      """
      Given a list of PAN-OS security advisories, compare the given panos-version to see if the version matches the affected list

      :param panos_version: The string version of PAN-OS, such as 9.1.1
      :param advisories_list: The list of Security Advisories
      """
      matched_advisories: List[Advisory] = []
      for advisory in advisories_list:
          if panos_version in simplify_affected_version_list(advisory.affected_version_list):
              matched_advisories.append(advisory)

      return matched_advisories


  def main():
      """
      Main function
      Reads advisories from the pan-advisories-get-advisories command and compares them with the provided PAN-OS version to check
      for a match - if so, returns the matching advisories.
      """
      advisories_list: list = demisto.args().get("advisories")

      advisories_objects: List[Advisory] = [Advisory(**advisory_dict) for advisory_dict in advisories_list]
      panos_version: str = demisto.args().get("version")
      matched_advisories = compare_version_with_advisories(panos_version, advisories_list=advisories_objects)
      return_results(return_result_dataclass(matched_advisories))


  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

  register_module_line('CheckPanosVersionAffected', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags: []
type: python
