category: testing
commonfields:
  id: Hard Coded Feed
  version: -1
configuration:
- display: ""
  name: JSON
  required: false
  type: 12
- additionalinfo: Set this to determine the HelloWorld score that will determine if
    an IP is malicious (0-100)
  defaultvalue: "65"
  display: Score threshold for IP reputation command
  name: threshold_ip
  required: false
  type: 0
- additionalinfo: Set this to determine the HelloWorld score that will determine if
    a domain is malicious (0-100)
  defaultvalue: "65"
  display: Score threshold for domain reputation command
  name: threshold_domain
  required: false
  type: 0
- display: Trust any certificate (not secure)
  name: insecure
  required: false
  type: 8
- display: Use system proxy settings
  name: proxy
  required: false
  type: 8
- display: Fetch indicators
  name: feed
  required: false
  type: 8
- additionalinfo: Indicators from this integration instance will be marked with this
    verdict
  display: Indicator Verdict
  name: feedReputation
  options:
  - Unknown
  - None
  - Benign
  - Good
  - Suspicious
  - Malicious
  - Bad
  required: false
  type: 18
- additionalinfo: Reliability of the source providing the intelligence data
  defaultvalue: F - Reliability cannot be judged
  display: Source Reliability
  name: feedReliability
  options:
  - A - Completely reliable
  - B - Usually reliable
  - C - Fairly reliable
  - D - Not usually reliable
  - E - Unreliable
  - F - Reliability cannot be judged
  required: true
  type: 15
- defaultvalue: indicatorType
  display: ""
  name: feedExpirationPolicy
  options:
  - never
  - interval
  - indicatorType
  - suddenDeath
  required: false
  type: 17
- defaultvalue: "20160"
  display: ""
  name: feedExpirationInterval
  required: false
  type: 1
- defaultvalue: "240"
  display: Feed Fetch Interval
  name: feedFetchInterval
  required: false
  type: 19
- additionalinfo: When selected, the exclusion list is ignored for indicators from
    this feed. This means that if an indicator from this feed is on the exclusion
    list, the indicator might still be added to the system.
  display: Bypass exclusion list
  name: feedBypassExclusionList
  required: false
  type: 8
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: ""
    itemVersion: ""
    packID: ""
    packName: ""
    propagationLabels: []
    toServerVersion: ""
description: This is sharon's hard coded feed
display: Hard Coded Feed
name: Hard Coded Feed
script:
  dockerimage: demisto/python3:3.10.4.30607
  feed: true
  runonce: false
  script: |-
    register_module_line('Hard Coded Feed', 'start', __line__())

    ''' IMPORTS '''
    import uuid
    import hashlib
    import json
    from random import randint
    from typing import List, Dict

    def generate_md5_indicator():
        indicator_value = hashlib.md5(uuid.uuid4().hex.encode('UTF-8')).hexdigest()
        return {
            "value": indicator_value,
            "rawJSON": {
                "type": "MD5"
            }
        }

    def generate_sha256_indicator():
        indicator_value = hashlib.sha256(uuid.uuid4().hex.encode('UTF-8')).hexdigest()
        return {
            "value": indicator_value,
            "rawJSON": {
                "type": "SHA256"
            }
        }

    def generate_ip_indicator():
        indicator_value = f'{str(randint(0, 254))}.{str(randint(0, 254))}.{str(randint(0, 254))}.{str(randint(0, 254))}'
        return {
            "value": indicator_value,
            "rawJSON": {
                "type": "IP"
            }
        }

    def generate_url_value(url_prefix):
        indicator_value = f'www.{url_prefix}{str(randint(0, 10000))}.com'
        return {
            "value": indicator_value,
            "rawJSON": {
                "type": "URL"
            }
        }

    def generate_email_value(domain):
        username = uuid.uuid4().hex
        indicator_value = f'{username}@{domain}.com'
        return {
            "value": indicator_value,
            "rawJSON": {
                "type": "EMAIL"
            }
        }

    def fetch_indicators_mock(static_data:List[Dict]):
        for indicator in static_data:
            if "rawJSON" in indicator:
                indicator["rawJSON"]["source"] = "Hard Coded Feed"

        return static_data

    def main():
        params = demisto.params()
        command = demisto.command()
        args = demisto.args()

        demisto.debug(f'Command being called is {command}')

        try:
            if demisto.command() == 'fetch-indicators':
                static_data = json.loads(demisto.params().get('JSON'))
                indicators = fetch_indicators_mock(static_data)

                demisto.createIndicators(indicators)
            else:
                raise NotImplementedError(f'Command {command} is not implemented.')

        # Log exceptions and return errors
        except Exception as e:
            demisto.error(traceback.format_exc())  # Print the traceback
            return_error(f'Failed to execute {command} command.\nError:\n{str(e)}')

    if __name__ in ['__main__', 'builtin', 'builtins']:
        main()

    register_module_line('Hard Coded Feed', 'end', __line__())
  subtype: python3
  type: python
