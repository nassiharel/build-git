args:
- description: 'Forensic file EntryID '
  name: ForensicFileEntry
  required: true
comment: Analyzes the forensic data to detect brand impersonation attacks. This script
  uses the HMRC brand as an example, please modify the attributes associated with
  your company’s brand.
commonfields:
  id: BrandImpersonationDetection
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 6.0.0
    itemVersion: 1.3.1
    packID: SlashNextPhishingIncidentResponse
    packName: SlashNext Phishing Incident Response - Annual Subscription  (Direct
      Subscription)
    packPropagationLabels:
    - all
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.9.7.24076
enabled: true
engineinfo: {}
mainengineinfo: {}
name: BrandImpersonationDetection
outputs:
- contextPath: SlashNext.PhishingBrand
  description: Target brand of phishing URL
  type: string
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('BrandImpersonationDetection', 'start', __line__())
  import re




  # Scipt result
  res = False
  # Mandatory arguments
  file_entry_ids = demisto.args()["ForensicFileEntry"]
  forensic_files = file_entry_ids if isinstance(file_entry_ids, list) else file_entry_ids.split(",")

  try:
      for entry in forensic_files:
          files_info = demisto.getFilePath(id=entry)
          with open(files_info["path"], "r") as file_handle:
              file_content = file_handle.read()

              result = re.findall('hm rеvеnuе & custоms', file_content, re.IGNORECASE)
              if len(result):
                  res = True

              result = re.findall('GOV.UK', file_content)
              if len(result):
                  res = True

              result1 = re.findall('hmrc', file_content, re.IGNORECASE)
              result2 = re.findall('gov.uk', file_content, re.IGNORECASE)
              if len(result1) and len(result2):
                  res = True

              result1 = re.findall('tax refund', file_content, re.IGNORECASE)
              result2 = re.findall('gov.uk', file_content, re.IGNORECASE)
              if len(result1) and len(result2):
                  res = True

              ec = {
                  "SlashNext.PhishingBrand": "HMRC" if res else "Unknown"
              }

              ioc_cont = {
                  "PhishingBrand": "HMRC" if res else "Unknown"
              }

              md = tableToMarkdown(
                  "HMRC Targeted Phishing Detection",
                  ioc_cont,
                  ['PhishingBrand']
              )

              return_outputs(md, ec, ioc_cont)

  except Exception as ex:
      return_error("Exception Occurred, {}".format(str(ex)))

  register_module_line('BrandImpersonationDetection', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- phishing
type: python
