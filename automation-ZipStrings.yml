args:
- description: The first list. List must be at same size as list2.
  isArray: true
  name: list1
  required: true
- description: "A format to join strings by, for example- {1}-{2} will take values
    in the same index of both list, \nwhere the {1} will be replaced with the value
    from list1 and {2} will be replaced with the value from list2."
  name: format
- description: The second list. List must be at same size as list1.
  isArray: true
  name: list2
  required: true
comment: Joining values by index from 2 list according to a given format.
commonfields:
  id: ZipStrings
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 6.0.0
    itemVersion: 1.6.65
    packID: CommonScripts
    packName: Common Scripts
    packPropagationLabels:
    - all
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.10.4.29342
enabled: true
engineinfo: {}
mainengineinfo: {}
name: ZipStrings
outputs:
- contextPath: zipped_list
  description: A list of joined values by the format given.
  type: string
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('ZipStrings', 'start', __line__())



  ''' COMMAND FUNCTION '''


  def mapper_command(args: Dict[str, Any]) -> CommandResults:
      format = str(args.get('format', '{1}-{2}'))
      list1 = args.get('list1', [])
      list2 = args.get('list2', [])
      if isinstance(list1, str):
          list1 = [list1]
      if isinstance(list2, str):
          list2 = [list2]

      res = [format.replace('{1}', x).replace('{2}', y) for x, y in zip(list1, list2)]

      return CommandResults(outputs={
          'zipped_list': res
      })


  ''' MAIN FUNCTION '''


  def main():  # pragma: no cover
      try:
          return_results(mapper_command(demisto.args()))
      except Exception as ex:
          demisto.error(traceback.format_exc())  # print the traceback
          return_error(f'Failed to execute BaseScript. Error: {str(ex)}')


  ''' ENTRY POINT '''
  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

  register_module_line('ZipStrings', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags: []
type: python
