args:
- description: The end date for fetching incidents in ISO format. Incidents will be
    fetched until the last day of the specified month. For example, if you specify
    2020-08-14, incidents created on the specified "from" date until  2020-08-31 will
    be returned.
  name: to
- description: The start date for fetching incidents in ISO format. Incidents will
    be fetched starting from the first day of the specified month. For example, if
    you specify 2020-08-14, incidents created on 2020-08-01 will be returned.
  name: from
- auto: PREDEFINED
  defaultValue: "false"
  description: Change to true to return a result suitable for a table widget. By default
    the return will be in Markdown.
  name: table_result
  predefined:
  - "true"
  - "false"
- auto: PREDEFINED
  defaultValue: "false"
  description: 'WARNING: Setting this argument to true might result in CPU and RAM
    issues. Set to true to allow the script to run even though it was deprecated.'
  name: ignore_deprecated
  predefined:
  - "true"
  - "false"
comment: Deprecated. Use System Diagonstics page instead (available from version 6.2.0).
  Returns inputs and outputs larger than 1 MB from all Cortex XSOAR investigations.
commonfields:
  id: GetLargestInputsAndOuputsInIncidents
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 6.0.0
    itemVersion: 1.2.7
    packID: CommonWidgets
    packName: Common Widgets
    packPropagationLabels:
    - all
    propagationLabels: []
    toServerVersion: ""
deprecated: true
dockerimage: demisto/python3:3.9.7.24076
engineinfo: {}
mainengineinfo: {}
name: GetLargestInputsAndOuputsInIncidents
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('GetLargestInputsAndOuputsInIncidents', 'start', __line__())





  def find_largest_input_or_output(all_args_list) -> dict:
      max_arg = {'Size(MB)': 0}
      for arg in all_args_list:
          if arg.get('Size(MB)') > max_arg.get('Size(MB)'):
              max_arg = arg

      return max_arg


  def get_largest_inputs_and_outputs(inputs_and_outputs, largest_inputs_and_outputs, incident_id) -> None:
      inputs = []
      outputs = []
      urls = demisto.demistoUrls()
      server_url = urls.get('server', '')
      incident_url = os.path.join(server_url, '#', 'incident', incident_id)
      if inputs_and_outputs:
          # In case no inputs and outputs are found a getInvPlaybookMetaData will return a string.
          # in that case we ignore the results and move on.
          if isinstance(inputs_and_outputs, str):
              return
          for task in inputs_and_outputs:
              task_id = task.get('id')
              if 'outputs' in task:
                  for output in task.get('outputs'):
                      task_url = os.path.join(server_url, '#', 'WorkPlan', incident_id, task_id)
                      outputs.append({
                          'IncidentID': f"[{incident_id}]({incident_url})",
                          'TaskID': f"[{task_id}]({task_url})",
                          'TaskName': task.get('name'),
                          'Name': output.get('name'),
                          'Size(MB)': float(output.get('size', 0)) / 1024,
                          "InputOrOutput": 'Output',
                      })

              else:
                  for arg in task.get('args'):
                      task_url = os.path.join(server_url, '#', 'WorkPlan', incident_id, task_id)
                      inputs.append({
                          'IncidentID': f"[{incident_id}]({incident_url})",
                          'TaskID': f"[{task_id}]({task_url})",
                          'TaskName': task.get('name'),
                          'Name': arg.get('name'),
                          'Size(MB)': float(arg.get('size', 0)) / 1024,
                          'InputOrOutput': "Input",
                      })
      if inputs:
          largest_inputs_and_outputs.append(find_largest_input_or_output(inputs))

      if outputs:
          largest_inputs_and_outputs.append(find_largest_input_or_output(outputs))


  def get_extra_data_from_investigations(investigations: list) -> list:
      largest_inputs_and_outputs: List = []
      for inv in investigations:
          raw_output = demisto.executeCommand('getInvPlaybookMetaData',
                                              args={
                                                  "incidentId": inv.get('IncidentID'),
                                              })
          if is_error(raw_output):
              raise DemistoException(f'Failed to run getInvPlaybookMetaData:\n{get_error(raw_output)}')

          inputs_and_outputs = raw_output[0].get('Contents', {}).get('tasks')
          get_largest_inputs_and_outputs(inputs_and_outputs, largest_inputs_and_outputs, inv.get('IncidentID'))
      return largest_inputs_and_outputs


  def main():
      try:
          args: Dict = demisto.args()
          if is_demisto_version_ge("6.2.0"):
              deprecate_msg = "Warning: This script has been deprecated. Please checkout the System Diagnostic page " \
                              "for an alternative."
              if not argToBoolean(args.get('ignore_deprecated')):
                  raise DemistoException(deprecate_msg)
              else:
                  demisto.info(deprecate_msg)
          is_table_result = argToBoolean(args.get('table_result', False))
          raw_output = demisto.executeCommand('GetLargestInvestigations',
                                              args={
                                                  'from': args.get('from'),
                                                  'to': args.get('to'),
                                                  'table_result': 'true',
                                                  'ignore_deprecated': 'true',
                                              })
          if is_error(raw_output):
              raise DemistoException(f'Failed to run GetLargestInvestigations:\n{get_error(raw_output)}')

          investigations = raw_output[0].get('Contents', {}).get('data')
          data = get_extra_data_from_investigations(investigations)

          if not is_table_result:
              return_results(tableToMarkdown('Largest Inputs And Outputs In Incidents', data))
          else:
              return_results(data)

      except Exception as exc:
          return_error(f'Failed to execute GetLargestInputsAndOuputsInIncidents.\nError: {exc}', error=exc)


  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

  register_module_line('GetLargestInputsAndOuputsInIncidents', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- widget
type: python
